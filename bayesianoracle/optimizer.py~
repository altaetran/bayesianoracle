import numpy as np

from . import process_objects
from . import misc

class SequentialOptimizer(process_objects.EnrichedGaussianProcess):
    def __init__(self, 
                 ndim,
                 max_der_order=2,
                 constraints=None,
                 amplitude_prior=None,
                 scale_priors=None,
                 noisy=True,
                 kernel_type='SquaredExponential',
                 verbose=True):
        super(SequentialOptimizer, self).__init__(ndim,
                                                  max_der_order=max_der_order,
                                                  constraints=constraints,
                                                  amplitude_prior=amplitude_prior,
                                                  scale_priors=scale_priors,
                                                  noisy=noisy,
                                                  kernel_type=kernel_type,
                                                  verbose=verbose)

    def locate_acquisition_point(self, x0=None, trust_radius=1.5):
        """ Suggest a new ponit, X, that minimizes the expected improvement

        Parameters
        ----------
        x0 : Initial starting point for EI maximization. Setting x0 to None
             defaults the starting point to the last most iteration
        tr : Trust radius for the EI maximization. Defaults to 0.5. All solutions
             proposed must be within tr distance from x0 

        Output
        -------
        X_guess : shape = (n_features,) """
        import scipy

        xi = .01
        order = 0

        if self.verbose:
            print("BayesianOracle>> locating acqusition point... ")
            misc.tic()
            
        X = self.data[0]['X']
        # Use default of last iteration if x0 is None type
        if x0 is None:
            x0 = X[X.shape[0]-1,:]

        # Seed the trust region and find the best point
        nseed = 2000*self.ndim

        # Generate random lengths in [0,trust_radius]
        U = scipy.random.random(size=(nseed, 1))
        lengths = trust_radius*(U**(1.0/self.ndim))
        # Get uniformly distributed directions
        directions = scipy.random.randn(nseed, self.ndim)
        row_norms = np.sum(directions**2,axis=1)**(1./2)

        # Normalize the directions, then multiply by the lengths
        row_mult = (row_norms / lengths.T).T
        X_search = (directions / row_mult) + x0
        
        # Maximize expected improvement over search points
        ei = -self.calculate_EI(X_search, xi, order)
        x_search = X_search[np.argmin(ei)]

        def minus_ei(x):
            return -float(self.calculate_EI(np.array([x]), xi, order))

        result = scipy.optimize.minimize(minus_ei, x_search,
                                         bounds=self.constraints,
                                         options={'maxiter':1000, 'gtol':1e-5},
                                         method='TNC')

        if self.verbose:
            print("BayesianOracle>> found in " + str(misc.toc()) + " seconds")
            
        return x_search

class SequentialLeastSquaresOptimizer(process_objects.MultiIndependentTaskGaussianProcess):
    def __init__(self, 
                 ndim,
                 neq,
                 max_der_order=2,
                 constraints=None,
                 amplitude_prior=None,
                 scale_priors=None,
                 noisy=False,
                 kernel_type='Matern52',
                 verbose=True):

        super(SequentialLeastSquaresOptimizer, self).__init__(ndim,
                                                              neq,
                                                              max_der_order=2,
                                                              noisy=noisy,
                                                              constraints=constraints,
                                                              kernel_type=kernel_type,
                                                              verbose=verbose)

    def locate_acquisition_point(self, x0, trust_radius=1.5):
        """ Suggest a new ponit, X, that minimizes the expected improvement

        Parameters
        ----------
        x0 : Initial starting point for EI maximization. Setting x0 to None
             defaults the starting point to the last most iteration
        tr : Trust radius for the EI maximization. Defaults to 0.5. All solutions
             proposed must be within tr distance from x0 

        Output
        -------
        X_guess : shape = (n_features,) """
        import scipy

        kappa = -0.5

        if self.verbose:
            print("BayesianOracle>> locating acqusition point... ")
            misc.tic()

        # Seed the trust region and find the best point
        nseed = 2000*self.ndim

        # Generate random lengths in [0,trust_radius]
        U = scipy.random.random(size=(nseed, 1))
        lengths = trust_radius*(U**(1.0/self.ndim))
        # Get uniformly distributed directions
        dirnections = scipy.random.randn(nseed, self.ndim)
        row_norms = np.sum(directions**2,axis=1)**(1./2)

        # Normalize the directions, then multiply by the lengths
        row_mult = (row_norms / lengths.T).T
        X_search = (directions / row_mult) + x0
        
        # Maximize expected improvement over search points
        ei = self.discounted_mean(X_search, kappa)
        x_search = X_search[np.argmin(ei)]

        def ei(x):
            return float(self.discounted_mean(np.array([x]), kappa))

        result = scipy.optimize.minimize(ei, x_search,
                                         bounds=self.constraints,
                                         options={'maxiter':1000, 'gtol':1e-5},
                                         method='TNC')

        if self.verbose:
            print("LOL")
            print("BayesianOracle>> found in " + str(misc.toc()) + " seconds")
            print(result)

        return result.x
        return x_search

class QuadraticBMAOptimizer(process_objects.EnrichedQuadraticBMAProcess):
    def __init__(self, 
                 ndim,
                 verbose=True):
        super(QuadraticBMAOptimizer, self).__init__(ndim=ndim,
                                                    verbose=verbose)

    def locate_acquisition_point(self, x0=None, trust_radius=10):
        """ Suggest a new point, X, that minimizes the expected improvement

        Parameters
        ----------
        x0 : Initial starting point for discounted mean minimization. Setting x0 to None
             defaults the starting point to the last most iteration
             x0 must be (n x 1) array
        tr : Trust radius for the EI minimization. Defaults to 10. All solutions
             proposed must be within trust_radius distance from x0 

        Output
        -------
        X_guess : shape = (n_features,) """
        import scipy

        kappa = 1

        if self.verbose:
            print("BayesianOracle>> locating acqusition point... ")
            misc.tic()
            
        # Use default of last iteration if x0 is None type
        if x0 is None:
            x0 = self.data[-1][0]

        # Seed the trust region and find the best point
        nseed = 2000*self.ndim

        # Generate random lengths in [0,trust_radius]
        U = scipy.random.random(size=(nseed, 1))
        lengths = trust_radius*(U**(1.0/self.ndim))
        # Get uniformly distributed directions
        directions = scipy.random.randn(nseed, self.ndim)
        row_norms = np.sum(directions**2,axis=1)**(1./2)

        # Normalize the directions, then multiply by the lengths
        row_mult = (row_norms / lengths.T).T
        X_search = (directions / row_mult) + x0
        
        # Maximize expected improvement over search points
        discounted_means = -self.calculate_discounted_mean(X_search, kappa)
        x_search = X_search[np.argmin(discounted_means)]

        if self.verbose:
            print("BayesianOracle>> found in " + str(misc.toc()) + " seconds")
            
        return x_search
